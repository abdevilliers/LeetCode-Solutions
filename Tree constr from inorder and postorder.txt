/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    stack<int> post;
    TreeNode * buildTree(vector<int> inorder,vector<int> postorder,
                        int inorderStart,int inorderEnd,int postorderStart,
                        int postorderEnd)
    {
      if(inorderStart==inorderEnd)
      {
          return new TreeNode(inorder[inorderStart]);
      }
        else if(inorderStart>inorderEnd)
        {
            return NULL;
        }
        int curEl=postorder[postorderEnd];
        int curElIdx=m[curEl];
        int leftTreeSize=curElIdx-inorderStart;
        TreeNode *root=new TreeNode(curEl);
        root->left=buildTree(inorder,postorder,inorderStart,curElIdx-1,
                            postorderStart,postorderStart+leftTreeSize-1);
        root->right=buildTree(inorder,postorder, curElIdx+1,inorderEnd,
                             postorderStart+leftTreeSize,postorderEnd-1);
        return root;
    }
    map<int,int> m;
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        for(int i=0;i<inorder.size();i++)
        {
            m[inorder[i]]=i;
            post.push(postorder[i]);
        }
        int inorderStart=0;
        int inorderEnd=inorder.size()-1;
        int postorderStart=0;
        int postorderEnd=postorder.size()-1;
        return buildTree(inorder,postorder,inorderStart,inorderEnd,postorderStart,postorderEnd);
    }
};