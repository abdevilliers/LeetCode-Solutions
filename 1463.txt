class Solution {
public:
    map<pair<pair<int,int>,pair<int,int>>,int> dp;
    int rows,cols;
    vector<vector<int>> mat;
    int myHelper(int rob1x,int rob1y,int rob2x,int rob2y){
        //cout<<rob1x<<" : "<<rob1y<<" : "<<rob2x<<" : "<<rob2y<<endl;
        //cout<<rows<<" : "<<cols<<endl;
            if(rob1x==rows-1)
        {
            int ans=mat[rob1x][rob1y];
            if(rob2y!=rob1y)
            {
                ans+=mat[rob2x][rob2y];
            }
            return ans;
        }
        
        if(dp.count({{rob1x,rob1y},{rob2x,rob2y}})!=0)
        {
            return dp[{{rob1x,rob1y},{rob2x,rob2y}}];
        }
        
        int path1,path2,path3,path4,path5,path6,path7,path8,path9;
        path1=path2=path3=path4=INT_MIN;
        path5=path6=path7=path8=path9=INT_MIN;
        int curans=0;
        curans+=mat[rob1x][rob1y];
        //cout<<curans<<" is the vlaue of curans"<<endl;
        if(rob1y!=rob2y)
        {
            curans+=mat[rob2x][rob2y];
        }
        //cout<<curans<<" is the vaolue of curans"<<endl;
       if(rob1y-1>=0 && rob2y-1>=0)
       {
       path1=myHelper(rob1x+1,rob1y-1,rob2x+1,rob2y-1);
           path1+=curans;
       }
        if(rob2y-1>=0)
        {
        path2=myHelper(rob1x+1,rob1y,rob2x+1,rob2y-1);
            path2+=curans;
        }
        if(rob1y+1<cols && rob2y-1>=0)
        {
        path3=myHelper(rob1x+1,rob1y+1,rob2x+1,rob2y-1);
            path3+=curans;
        }
        if(rob1y-1>=0)
        {
         path4=myHelper(rob1x+1,rob1y-1,rob2x+1,rob2y);
            path4+=curans;
        }
        
        path5=myHelper(rob1x+1,rob1y,rob2x+1,rob2y);
        path5+=curans;
        if(rob1y+1<cols)
        {
        path6=myHelper(rob1x+1,rob1y+1,rob2x+1,rob2y);
            path6+=curans;
        }
        if(rob1y-1>=0  && rob2y+1<cols)
        {
         path7=myHelper(rob1x+1,rob1y-1,rob2x+1,rob2y+1);
            path7+=curans;
        }
        if(rob2y+1<cols){
        path8=myHelper(rob1x+1,rob1y,rob2x+1,rob2y+1);
            path8+=curans;
        }
        if(rob1y+1<cols && rob2y+1<cols){
        path9=myHelper(rob1x+1,rob1y+1,rob2x+1,rob2y+1);
            path9+=curans;
        }
    int answer1=max(max(path1,path2),max(path3,path4));
    int answer2=max(max(path5,path6),max(path7,path8));
        int answer3=max(max(answer1,answer2),path9);
        return dp[{{rob1x,rob1y},{rob2x,rob2y}}]=answer3;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        rows=grid.size();
        cols=grid[0].size();
        mat=grid;
        return myHelper(0,0,0,cols-1);
        
    }
};