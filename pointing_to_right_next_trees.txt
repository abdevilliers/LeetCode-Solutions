/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    map<int,vector<Node *>> m;
    void inorder(Node *&root,int lvl)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left,lvl+1);
        if(m.count(lvl)==0)
        {
            m[lvl]=vector<Node *>{root};
        }
        else{
            int arrSize=m[lvl].size();
            m[lvl][arrSize-1]->next=root;
            m[lvl].push_back(root);
        }
        cout<<root->val<<endl;
        inorder(root->right,lvl+1);
    }
    Node* connect(Node* root) {
        inorder(root,1);
        for(auto p:m )
        {
            int level=p.first;
            vector<Node *> nodes=p.second;
            cout<<level<<": ";
            for(auto eachNode:nodes)
            {
                cout<<eachNode->val<<"->";
            }
             cout<<endl;
        }
        return root;
        
    }
};