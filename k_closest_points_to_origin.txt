class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<pair<double,int>,int>> maxHeap;
        int n=points.size();
        for(int i=0;i<n;i++)
        {
            double distance=pow((points[i][0]*points[i][0])+(points[i][1]*points[i][1]),(1));
            //cout<<distance<<" : "<<points[i][0]<<" : "<<points[i][1]<<endl;
            if(maxHeap.size()<k)
            {
                maxHeap.push({{distance,points[i][0]},points[i][1]});
            }
            else{
            
                double curMax=maxHeap.top().first.first;
                  //  cout<<curMax<<" is the value of curMax"<<endl;
                if(curMax>distance)
                {
                    //cout<<curMax<<" is the value of curMax"<<endl;
                    maxHeap.pop();
                    maxHeap.push({{distance,points[i][0]},points[i][1]});
                }
            }
        }
        vector<vector<int>> finans;
        while(!maxHeap.empty())
        {
            pair<pair<double,int>,int> curTop=maxHeap.top();
            finans.push_back(vector<int>{curTop.first.second,curTop.second});
            maxHeap.pop();
        }
        return finans;
        
    }
};